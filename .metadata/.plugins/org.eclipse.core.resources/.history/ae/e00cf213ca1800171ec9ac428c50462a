/*****************************************************************
GUI for the Whack a Mole

@author Molly Alger
 *****************************************************************/


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.Semaphore;

import javax.swing.*;

public class PetADog extends JPanel {

	private static final long serialVersionUID = 1L;
	private JButton[] board;
	private JLabel scoreLabel;
	private int size;
	private int shown;
	private String[] d;
	private String[] sizes = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
	private ArrayList<Thread> threads = new ArrayList<Thread>();
	private JPanel center = new JPanel();
	private ButtonListener listen;
	private int score;

	public PetADog() {

		// create panels for the GUI
		JPanel j = new JPanel();
		j.setLayout(new BorderLayout());
		JPanel top = new JPanel();
		JPanel bottom = new JPanel();

		listen = new ButtonListener();

		optionPanes();

		// create a grid layout for the board
		center.setLayout(new GridLayout(size, size));

		board = new JButton[size*size];
		
		Semaphore sem = new Semaphore(shown);
		
		for(int i = 0; i < size*size; i++) {
			
			System.out.println("Creating thread " + i);
			Thread m = new Thread(new DogThread(sem, i, board[i]));
			threads.add(m);
			m.start();
			
		}

		score = 0;
		scoreLabel = new JLabel(Integer.toString(score));
		displayScore();
		bottom.add(scoreLabel);

		// put panels in correct places
		add(j);
		j.add(top, BorderLayout.NORTH);
		j.add(center, BorderLayout.CENTER);
		j.add(bottom, BorderLayout.SOUTH);

	}

	// shows JOptionPanes for user input
	private void optionPanes(){

		try {
			
			// get user input for board size
			size = Integer.parseInt((String)
					JOptionPane.showInputDialog
					(null, "How large is the board? (N x N)", "Board Size", 
							JOptionPane.PLAIN_MESSAGE, null, 
							sizes, sizes[0]));
			
			d = new String[size*size];
			for(int i = 0; i < size*size; i++)
				d[i] = "" + (i+1);
	
			// get user input for number of dogs shown
			shown = Integer.parseInt((String)
					JOptionPane.showInputDialog
					(null, "Maximum number of dogs shown?", "Dogs", 
							JOptionPane.PLAIN_MESSAGE, null, 
							d, d[(size-1)*(size-1)]));
		
		} catch (Exception e){
			e.printStackTrace();
		}
	}

	// displays the score
	private void displayScore(){
		String s = "";

		scoreLabel.setText(s);
	}

	private class ButtonListener implements ActionListener {

		public void actionPerformed(ActionEvent e) {
			Object source = e.getSource();
			((Component)source).setBackground(Color.RED);
			score++;
			scoreLabel.setText(Integer.toString(score));
		}
	}
	
	class DogThread implements Runnable {
		
		Semaphore sem;
		boolean showing;
		int threadNum;
		JButton button;
		
		public DogThread (Semaphore s, int name, JButton b) {
			sem = s;
			threadNum = name;
			button = b;
			button = new JButton("");
			button.setBackground(Color.white);
			button.setPreferredSize(new Dimension (75, 50));
			button.setEnabled(true);
			center.add(button);
			button.addActionListener(listen);
		}
		
		public void run() {

			try {
				sem.acquire();
				System.out.println("Showing thread " + threadNum);
				button.setText(Integer.toString(threadNum));
				showing = true;
				Random rand = new Random();
				int time = rand.nextInt(5000);
				Thread.sleep(time);
			} catch (Exception e) {
				
			}
			button.setText("");
			sem.release();
		}
		
	}
	
}

