import java.util.ArrayList;
import java.util.concurrent.Semaphore;

public class GameLogic {
	
	private int shown;
	private int size;
	
	private ArrayList<Thread> threads = new ArrayList<Thread>();
	
	public GameLogic() {
		
		Semaphore sem = new Semaphore(shown);
		
		for(int i = 0; i < size; i++) {
			
			Thread m = new Thread(new MoleThread(sem, false));
			threads.add(m);
			m.start();
			
		}
		
		for(Thread t: threads) {
			
			try {
				if(t.isAlive()) {
					t.join();
				}
			} catch (Exception e) {
				
			}
		}
	}
	
	public void setSize(int boardSize) {
		size = boardSize;
	}
	
	public void setMoles(int m) {
		shown = m;
	}
	
	
}


class MoleThread implements Runnable {
	
	Semaphore sem;
	boolean showing;
	
	public MoleThread (Semaphore s, boolean status) {
		sem = s;
		showing = status;
	}
	
	public void run() {
		
	}
	
	public boolean show() {
		
		
		
		return showing;
	}
	
}

class PlayerThread implements Runnable {
	
	public void run() {
		
	}
	
}